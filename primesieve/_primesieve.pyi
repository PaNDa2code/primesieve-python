from typing import List, Union
from libc.stdint import uint64_t, int64_t

# Define custom types for your extension
_arr_type = Union[bytes, bytearray]

class Iterator:
    def __init__(self) -> None:
        ...

    def skipto(self, start: int, stop_hint: int = 2**62) -> None:
        ...

    def next_prime(self) -> int:
        ...

    def prev_prime(self) -> int:
        ...

def primes(from_limit: uint64_t, to_limit: uint64_t = 0) -> List[int]:
    ...

def n_primes(n: uint64_t, start: uint64_t = 0) -> List[int]:
    ...

def nth_prime(n: int, start: uint64_t = 0) -> int:
    ...

def count_primes(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def count_twins(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def count_triplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def count_quadruplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def count_quintuplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def count_sextuplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> uint64_t:
    ...

def print_primes(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def print_twins(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def print_triplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def print_quadruplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def print_quintuplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def print_sextuplets(from_limit: uint64_t, to_limit: uint64_t = 0) -> None:
    ...

def get_max_stop() -> uint64_t:
    ...

def get_sieve_size() -> int:
    ...

def get_num_threads() -> int:
    ...

def set_sieve_size(sieve_size: int) -> None:
    ...

def set_num_threads(threads: int) -> None:
    ...

def primesieve_version() -> str:
    ...

def primes_range(*args:int) -> Iterator[int]:
    ...
